@model IEnumerable<smartmetercms.Models.PowerQuality>
@{
    ViewData["Title"] = "Admin Dashboard";
}

<link rel="stylesheet" href="~/css/admindashboard.css" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

<div class="admin-dashboard-container">
    <main class="admin-main-content">
        <h2>Admin Dashboard</h2>
        <p>Welcome, Admin. Here you can manage users, meters, and more.</p>

        <!-- Billing Section -->
        <section class="billing-section">
            <h3>Generate Bills</h3>
            <form asp-controller="Bill" asp-action="GenerateBills" method="post">
                <div class="form-group">
                    <label for="startDate">Billing Period Start</label>
                    <input type="date" id="startDate" name="startDate" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="endDate">Billing Period End</label>
                    <input type="date" id="endDate" name="endDate" class="form-control" required />
                </div>
                <button type="submit" class="btn btn-primary">Generate Bills</button>
            </form>
        </section>

        <!-- Load Demand Section -->
        <section class="load-demand-section">
            <h3>Load Demand Visualization</h3>
            <div class="filter-section">
                <label for="dateFilter">Select Date:</label>
                <input type="date" id="dateFilter" value="2025-05-22" onchange="updateChartData()" />
                <button class="btn-export" onclick="exportCsv()">Export CSV</button>
            </div>
            <div id="chart-error" style="color: red; display: none; margin-bottom: 10px;">
                No data available for the selected date.
            </div>

            @if (Model != null && Model.Any())
            {
                <!-- Hidden table to store PowerQuality data -->
                <table class="table" style="display: none;">
                    <tbody id="data-table">
                        @foreach (var pq in Model)
                        {
                            <tr class="power-quality-row"
                                data-timestamp="@pq.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")"
                                data-power="@pq.InstantaneousPower">
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Chart -->
                <div class="chart-container">
                    <canvas id="loadDemandChart"></canvas>
                </div>

                <script>
                    var ctx = document.getElementById('loadDemandChart').getContext('2d');
                    var loadDemandChart;
                    var allData = @Html.Raw(Json.Serialize(Model.Select(pq => new
                    {
                        timestamp = pq.Timestamp.ToString("yyyy-MM-dd HH:mm:ss"),
                        power = pq.InstantaneousPower
                    }).ToArray()));

                    window.onload = function () {
                        console.log('Loaded data:', allData);
                        document.getElementById('dateFilter').value = '2025-05-22';
                        updateChartData();
                    };

                    function updateChartData() {
                        const selectedDate = document.getElementById('dateFilter').value;
                        const errorDiv = document.getElementById('chart-error');
                        let filteredData = [];

                        try {
                            filteredData = Array(24).fill(0).map((_, i) => ({ hour: i, power: 0 }));
                            allData.forEach(d => {
                                const date = new Date(d.timestamp);
                                if (d.timestamp.startsWith(selectedDate) && d.power > 0) {
                                    const hour = date.getHours();
                                    filteredData[hour].power += d.power;
                                }
                            });

                            if (filteredData.every(d => d.power === 0)) {
                                errorDiv.style.display = 'block';
                                if (loadDemandChart) loadDemandChart.destroy();
                                return;
                            }

                            errorDiv.style.display = 'none';
                            updateChart(filteredData);
                        } catch (err) {
                            console.error('Error updating chart:', err);
                            errorDiv.style.display = 'block';
                            if (loadDemandChart) loadDemandChart.destroy();
                        }
                    }

                    function updateChart(data) {
                        if (loadDemandChart) loadDemandChart.destroy();

                        const labels = data.map(d => `${d.hour}:00`);
                        const xTitle = 'Hour';

                        loadDemandChart = new Chart(ctx, {
                            type: 'line',
                            data: {
                                labels: labels,
                                datasets: [{
                                    label: 'Instantaneous Power (Hourly)',
                                    data: data.map(d => d.power),
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                    fill: true,
                                    tension: 0.3
                                }]
                            },
                            options: {
                                responsive: true,
                                plugins: {
                                    legend: { position: 'top' },
                                    title: { display: true, text: 'Hourly Load Demand' }
                                },
                                scales: {
                                    x: { title: { display: true, text: xTitle } },
                                    y: { title: { display: true, text: 'Power (W)' }, beginAtZero: true }
                                }
                            }
                        });
                    }

                    function exportCsv() {
                        const date = document.getElementById('dateFilter').value || '2025-05-22';
                        window.location.href = `/Home/ExportLoadDemandCsv?date=${date}&range=hour`;
                    }
                </script>
            }
            else
            {
                <p>No Power Quality data available.</p>
            }
        </section>

        <!-- Databases Section -->
        <section class="databases-section">
            <h3>Databases</h3>
            <ul class="database-links">
                <li><a href="/User/Index">Users</a></li>
                <li><a href="/IntervalEnergyUsage/Index">Interval Energy Usage</a></li>
                <li><a href="/EnergyUsage/Index">Energy Usage</a></li>
                <li><a href="/Bill/Index">Bills</a></li>
                <li><a href="/Payments/Index">Payments</a></li>
                <li><a href="/PowerQuality/Index">Power Quality</a></li>
            </ul>
        </section>
    </main>
</div>